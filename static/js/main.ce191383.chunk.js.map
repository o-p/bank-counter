{"version":3,"sources":["Clerk.jsx","bank.png","TicketMachine.jsx","WaitingList.jsx","Bank.jsx","reportWebVitals.js","index.jsx"],"names":["CircularProgressWithLabel","value","label","Box","position","display","CircularProgress","variant","top","left","bottom","right","alignItems","justifyContent","Typography","component","color","Clerk","employee","onDone","actionItem","useState","served","setServed","progress","setProgress","useEffect","action","workload","setTimeout","speed","id","Math","max","toFixed","ListItem","ListItemAvatar","name","ListItemText","primary","title","secondary","join","defaultProps","useStyles","makeStyles","theme","icon","marginRight","spacing","wrapper","TicketMachine","actions","waitings","next","onClick","classes","useMemo","floor","random","length","dispatcher","useCallback","Fab","className","root","flexGrow","ticket","margin","WaitingList","tickets","Grid","container","item","xs","md","gutterBottom","map","Chip","clickable","avatar","Avatar","flexDirection","minHeight","backgroundImage","image","backgroundPosition","backgroundSize","main","marginTop","marginBottom","footer","padding","dispatchTicketsToClerks","clerks","busyClerks","clerk","others","active","slice","Bank","employees","setTickets","nextID","setNextID","setClerks","remainTickets","nextClerks","addTicket","CssBaseline","Container","maxWidth","List","index","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","metadata","document","getElementById"],"mappings":"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","file":"static/js/main.ce191383.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nfunction CircularProgressWithLabel({ value, label }) {\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress\n        variant=\"determinate\"\n        value={value}\n      />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography\n          variant=\"caption\"\n          component=\"div\"\n          color=\"textSecondary\"\n        >\n          {label}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nCircularProgressWithLabel.propTypes = {\n  value: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n};\n\nexport default function Clerk({\n  employee,\n  onDone,\n  actionItem,\n}) {\n  const [served, setServed] = useState([]);\n  const [progress, setProgress] = useState(0);\n\n  // 跑 task 進度\n  useEffect(() => {\n    if (actionItem) {\n      if (progress < actionItem.action.workload) {\n        setTimeout(() => setProgress(progress + employee.speed), 120);\n      }\n    }\n  }, [actionItem, progress, employee.speed]);\n\n  // 回報已完成 tasks\n  if (actionItem && progress >= actionItem.action.workload) {\n    onDone();\n    setServed([...served, actionItem.id]);\n    setProgress(0);\n  }\n\n  let value;\n  if (actionItem) {\n    const { workload } = actionItem.action;\n    value = Math.max(0, (progress * 100) / workload).toFixed(1);\n  }\n\n  return (\n    <ListItem>\n      <ListItemAvatar>\n        <CircularProgressWithLabel\n          value={value}\n          label={employee.name}\n        />\n      </ListItemAvatar>\n      <ListItemText\n        primary={\n          actionItem ? `處理 #${actionItem.id} - ${actionItem.action.title}` : '閒置中'\n        }\n        secondary={\n          `已處理案件： ${served.join(', ')}`\n        }\n      />\n    </ListItem>\n  );\n}\n\nClerk.propTypes = {\n  employee: PropTypes.shape({\n    name: PropTypes.string,\n    speed: PropTypes.number,\n  }).isRequired,\n  onDone: PropTypes.func.isRequired,\n  actionItem: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    action: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      workload: PropTypes.number.isRequired,\n    }),\n  }),\n};\n\nClerk.defaultProps = {\n  actionItem: null,\n};\n","export default __webpack_public_path__ + \"static/media/bank.3bfe423a.png\";","import React, { useCallback, useMemo } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport PropTypes from 'prop-types';\nimport QueueOutlinedIcon from '@material-ui/icons/QueueOutlined';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(1),\n  },\n  wrapper: {\n    position: 'fixed',\n    right: theme.spacing(2),\n    bottom: theme.spacing(3),\n  },\n}));\n\nexport default function TicketMachine({\n  actions,\n  waitings = 0,\n  next = 1,\n  onClick,\n}) {\n  const classes = useStyles();\n  const action = useMemo(\n    () => actions[(Math.floor(Math.random() * actions.length) + next) % actions.length],\n    [actions, next],\n  );\n  const dispatcher = useCallback(() => onClick({ id: next, action }), [onClick, next, action]);\n  return (\n    <Fab\n      className={classes.wrapper}\n      onClick={dispatcher}\n      color=\"primary\"\n      variant=\"extended\"\n    >\n      <QueueOutlinedIcon className={classes.icon} />\n      {`等待人數 ${waitings}，下一個號碼 ${next}`}\n    </Fab>\n  );\n}\n\nTicketMachine.propTypes = {\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    workload: PropTypes.number.isRequired,\n  })).isRequired,\n  onClick: PropTypes.func.isRequired,\n  next: PropTypes.number.isRequired,\n  waitings: PropTypes.number.isRequired,\n};\n","import { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  ticket: {\n    margin: theme.spacing(0.2),\n  },\n}));\n\nexport default function WaitingList({ tickets }) {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.root} container spacing={1}>\n      <Grid item xs={4} md={1}>\n        <Typography\n          variant=\"h5\"\n          color=\"secondary\"\n          gutterBottom\n        >\n          等待中：\n        </Typography>\n      </Grid>\n      <Grid item xs={8} md={11}>\n        {\n          tickets.map((ticket) => (\n            <Chip\n              key={ticket.id}\n              className={classes.ticket}\n              clickable\n              avatar={<Avatar>{ticket.id}</Avatar>}\n              label={ticket.action.title}\n              color=\"default\"\n              variant=\"outlined\"\n            />\n          ))\n        }\n      </Grid>\n    </Grid>\n  );\n}\n\nWaitingList.propTypes = {\n  tickets: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    action: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      workload: PropTypes.number.isRequired,\n    }),\n  })).isRequired,\n};\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from '@material-ui/core/List';\n\nimport Clerk from './Clerk';\nimport image from './bank.png';\nimport TicketMachine from './TicketMachine';\nimport WaitingList from './WaitingList';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n    backgroundImage: `url(\"${image}\")`,\n    backgroundPosition: 'center top',\n    backgroundSize: 'cover',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n  },\n}));\n\n/**\n * 分配待處理業務給空閑櫃檯的邏輯\n */\nfunction dispatchTicketsToClerks(\n  tickets,\n  clerks,\n  busyClerks = [],\n) {\n  if (!tickets.length || !clerks.length) {\n    return [tickets, [...busyClerks, ...clerks]];\n  }\n\n  const [clerk, ...others] = clerks;\n  if (clerk.active && !clerk.actionItem) {\n    return dispatchTicketsToClerks(\n      tickets.slice(1),\n      others,\n      [...busyClerks, { ...clerk, actionItem: tickets[0] }],\n    );\n  }\n\n  return dispatchTicketsToClerks(\n    tickets,\n    others,\n    [...busyClerks, clerk],\n  );\n}\n\nexport default function Bank({ employees, actions }) {\n  const classes = useStyles();\n  // 待處理任務\n  const [tickets, setTickets] = useState([]);\n  const [nextID, setNextID] = useState(1);\n  // 所有櫃檯\n  const [clerks, setClerks] = useState(employees.map((employee) => ({\n    active: true,\n    actionItem: null,\n    employee,\n  })));\n\n  const handleActionDone = (i) => () => setClerks([\n    ...clerks.slice(0, i),\n    { ...clerks[i], actionItem: null },\n    ...clerks.slice(i + 1),\n  ]);\n\n  const [remainTickets, nextClerks] = dispatchTicketsToClerks(\n    tickets,\n    clerks,\n  );\n  if (tickets.length !== remainTickets.length) {\n    setTickets(remainTickets);\n    setClerks(nextClerks);\n  }\n\n  const addTicket = useCallback((ticket) => {\n    setTickets([...tickets, ticket]);\n    setNextID(nextID + 1);\n  }, [tickets, nextID]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Container component=\"main\" className={classes.main} maxWidth=\"sm\">\n        <List>\n          {\n            clerks.map(\n              (clerk, index) => (\n                <Clerk\n                  key={clerk.employee.name}\n                  actionItem={clerk.actionItem}\n                  employee={clerk.employee}\n                  onDone={handleActionDone(index)}\n                />\n              ),\n            )\n          }\n        </List>\n      </Container>\n      <footer className={classes.footer}>\n        <WaitingList tickets={tickets} />\n        <TicketMachine\n          actions={actions}\n          onClick={addTicket}\n          next={nextID}\n          waitings={tickets.length}\n        />\n      </footer>\n    </div>\n  );\n}\n\nBank.propTypes = {\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    workload: PropTypes.number.isRequired,\n  })).isRequired,\n  employees: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    speed: PropTypes.number.isRequired,\n  })).isRequired,\n};\n","/* eslint-disable */\nconst reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './bank.scss';\nimport Bank from './Bank';\nimport reportWebVitals from './reportWebVitals';\nimport metadata from './metadata.json';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bank\n      actions={metadata.actions}\n      employees={metadata.employees}\n    />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}